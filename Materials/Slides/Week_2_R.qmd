---
title: "Measurement, Understanding, Description"
subtitle: "Week 2"
format:
  pptx:
    incremental: true   
    reference-doc: templates/SOC2069_pptx_template.pptx
---

```{r}
#| output: false

library(tidyverse)
library(strengejacke)
library(easystats)
library(ggformula)

```


##

```{r}
#| echo: false
#| warning: false

data <- read_rds("../../Data/data_for_logo.rds") |> 
  mutate(gdp = GDPpercap2,
         ln_gdp = log(gdp),
         lnx_gdp = log(log(log(gdp))),
         exp_trust = (trust_pct^2)
         ) |>
  drop_na()

data %>%
  # filter(country != "China") |> 
  arrange(desc(pop)) %>%
  mutate(country = factor(country, country)) %>%
  ggplot( aes(x=gdp, y=trust_pct, size = pop/1000000, color = Region)) +
  geom_point(alpha=0.7) +
  scale_size(range = c(3, 15), name="Population") +
  scale_colour_manual(values=c("#293352", "#C4961A", "#52854C", "#D16103", "#99999900", "#9a372d", "#2d9aa4")) +
  theme(legend.position="right") +
  geom_text(aes(label = country), check_overlap = TRUE, size = 2.5) +
  xlab("GDP/capita in PPP") +
  ylab("Generalised trust (% of trusting in national population)") +
  ggtitle("Figure 1: Generalised Trust by GDP") +
  labs(caption = str_wrap("Source: The data on generalised social trust originate from the latest waves of the World Values Survey (2022) and the European Values Study (2017). Contextual data on GDP and population size come from the World Bank Development Indicators Database.", width = 130)) +
  theme(plot.caption = element_text(hjust=0),
        plot.caption.position = "plot")
```


## 




# Working in ***R*** and ***RStudio***

## こんにちは、私の名前は ***R*** です。

- A statistical programming language 
- A language called *S* is developed at Bell Labs (USA) in **1976**
- The *R* language created as a free open source implementation of *S* in **1991** at the University of Auckland (NZ); it developed into a different "dialect" of the original language *S*
- *R* goes public in **1993**, a core maintainer group is set up in **1997**, and Version 1.0.0 is released in **2000**
- Current stable, released version (`r Sys.Date()`) is *R-4.3.1* (2023-06-16, "Beagle Scouts"); minor releases about 4/5 times a year; mid-version releases about once a year; major releases every 7/8 years


## こんにちは、私の名前は：***R***

- A statistical programming language
- Computer commands as *speech acts*


## ***RStudio***: "But I'm here to help!"

- An *Integrated Development Interface* (IDE)
- Company founded in **2009** in Boston (MA, USA) to develop open source and enterprise-ready professional software for the *R* statistical computing environment
- First public beta version (v0.92) of the RStudio IDE came out in **2011**; Version 1 released in 2016; latest version (on `r Sys.Date()`) is Version: 2023.09.0+463, released: 2023-09-28
- In **2022** the company changes its name to *Posit PBC* in a move to be seen as more language-agnostic and embrace other programming languages too (Python, Julia, etc.). *RStudio* lives on as an IDE


## The ***RStudio*** interface




## Other essential tools we will use

- *R* packages
  - `tidyverse`
    - `dplyr`
  - `easystats`
    - `datawizard`
  - `ggplot2`
  - `ggformula`
  - `gtsummary`
  
- *R Markdown* / *Quarto*



## Functions

Example:

```{r}
#| echo: true

Chris_s_mean <- function(number1, number2) {
  mean_value <- (number1 + number2) / 2
  print(paste("The mean of", number1, "and", number2, "is", mean_value))
}

```


```{r}
#| error: true
#| echo: true

Chris_s_mean(2, 8)
Chris_s_mean(7, 9)
Chris_s_mean(461325, 7849545)
Chris_s_mean(1, 2, 3)
```

## Functions

What if we want more?

```{r}
#| echo: true

Chris_s_mean <- function(...) {
  numbers <- c(...)
  mean_value <- mean(numbers)
  print(ifelse(length(numbers) > 2, 
         paste("The mean of the numbers is", mean_value),
         paste("The mean of", numbers[1], "and", numbers[2], "is", mean_value))
        )
}
```

```{r}
#| echo: true

Chris_s_mean(1, 2, 3)

Chris_s_mean(9, 23)

Chris_s_mean(4:400)

```

# Measurement: from questionnaire items to dataset variables


## Variables

- Variables vs. constants
- "Lives in Newcastle" (Yes/No)
- "Lives in the UK" (Yes/No)
- "Lives on planet Earth" (Yes/No) (When you will be giving this lecture and your children will be sitting where you are sitting now, this may no longer be the case)


# Understanding and describing (clean) data







# Managing "messy" data








# Visualisation






## This print "Two content" output

:::: {.columns}

::: {.column width="40%"}
```{r}
#| echo: true
#| eval: true

library(palmerpenguins)

ggplot(penguins,                        
       aes(x = bill_length_mm,          
           y = bill_depth_mm, 
           color = species)) +
  geom_point()
```
:::

::: {.column width="60%"}

Something else

:::

::::

::: {.notes}
I may write a lot of extra stuff here in case you are interested.
:::


## Title


```{r}
#| echo: true

ggplot(penguins,                        
       aes(x = bill_length_mm,          
           y = bill_depth_mm, 
           color = species)) +
  geom_point()
```


## This prints to Comparison

:::: {.columns}

::: {.column}

```{r}
#| echo: true
#| output: true

plot(penguins$bill_depth_mm, 
     penguins$bill_length_mm)

```

:::

::: {.column}

```{r}
#| echo: true
#| output: true

ggplot(penguins,                        
       aes(bill_depth_mm,          
           bill_length_mm)) +
  geom_point()
```

:::

::::

--------------------------------------------------------------------------------

## Using `with()` in *base R*

:::: {.columns}

::: {.column}

```{r}
#| echo: true
#| output: true

with(penguins,
     plot(bill_depth_mm, 
          bill_length_mm))

```

:::

::: {.column}

```{r}
#| echo: true
#| output: true

ggplot(penguins,                        
       aes(bill_depth_mm,          
           bill_length_mm)) +
  geom_point()
```

:::

::::


--------------------------------------------------------------------------------

## Changing the `ggplot` theme

:::: {.columns}

::: {.column}

```{r}
#| echo: true
#| output: true

with(penguins,
     plot(bill_depth_mm, 
          bill_length_mm))

```

:::

::: {.column}

```{r}
#| echo: true
#| output: true

ggplot(penguins,                        
       aes(bill_depth_mm,          
           bill_length_mm)) +
  geom_point() +
  theme_classic()
```

:::

::::


--------------------------------------------------------------------------------

## *Some* further styling options

:::: {.columns}

::: {.column}

```{r}
#| echo: true
#| output: true

par(mar=c(4.5, 4.2, 1, 7), xpd=TRUE)          # set custom plot size

with(penguins,                                # select data frame
     plot(bill_depth_mm,                      # select variables to plot
          bill_length_mm,
          col = species,                      # grouping colour
          bty = "L")                          # change plot border style 
     )                                                            

with(penguins,
      legend("right",                         # legend position
             inset=c(-0.23,0.5),              # legend custom location (outside the plot)
             legend = levels(species),        # legend labels
             pch = 16,                        # legend symbol size
             col = unique(species),           # legend symbol colour
             bty = "n"                        # remove legend borders
             )
     )

```


:::

::: {.column}

```{r}
#| echo: true
#| output: true

ggplot(penguins,                              # draw empty canvas
       aes(bill_depth_mm,                     # select variables to plot
           bill_length_mm,
           color = species)) +                # grouping colour
  geom_point() +                              # select plot type
  theme_classic()                             # select pre-set style settings (theme)
```

:::

::::






--------------------------------------------------------------------------------


## Test


```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "|2"

library(ggplot2)

mtcars |> 
  ggplot(aes(x = disp, y = mpg)) +
  geom_point() +
  geom_smooth(method = "loess", formula = "y~x")
```




--------------------------------------------------------------------------------


## Final


This is an [important sentence!]{.fragment .highlight-red}



